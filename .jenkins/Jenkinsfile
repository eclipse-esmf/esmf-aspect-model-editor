import groovy.json.JsonSlurper;

pipeline {
  agent any
  tools {
    maven 'apache-maven-latest'
    jdk 'openjdk-jdk17-latest'
  }

  environment {
    GITHUB_BOT_TOKEN = credentials('github-bot-token')
  }

  stages {
    stage('Read parameters file') {
      steps {
        script {
          if (fileExists('parameters.txt')) {
            // Read the file
            def fileContent = readFile('parameters.txt').trim()

            // Split the file content into lines
            def lines = fileContent.split("\n")

            // Iterate over the lines and set the environment variables
            lines.each { line ->
              def parts = line.split('=')
              if (parts.size() == 2) {
                env[parts[0]] = parts[1]
              }
            }

            echo "Artifact URL Win: ${env.artifact_url_win}"
            echo "Artifact URL Mac: ${env.artifact_url_mac}"
            echo "Version: ${env.version}"
          } else {
            echo "Error: parameters.txt does not exist."
          }
        }
      }
    }

    stage('Download and unpack Windows artifact') {
      steps {
        script {
          def winOsFile = "aspect-model-editor-v${env.version}-win.zip"
          sh "curl -L -H 'Accept: application/vnd.github.v3+json' \
                        -H 'Authorization: Bearer ${GITHUB_BOT_TOKEN}' \
                        '${env.artifact_url_win}' \
                        --output '${winOsFile}'"
          sh "mkdir -p unpack_win_dir"
          sh "unzip -o aspect-model-editor-v${env.version}-win.zip -d unpack_win_dir"
          sh "rm '${winOsFile}'"
          sh "ls -a unpack_win_dir"
        }
      }
    }

    stage('Sign Windows Applications') {
      steps {
        script {
          sh "mkdir -p signed_dir"
          sh "curl -o signed_dir/aspect-model-editor-v${env.version}-win.exe -F file=@unpack_win_dir/aspect-model-editor-v${env.version}-win.exe https://cbi.eclipse.org/authenticode/sign"
          sh "zip -r aspect-model-editor-v${env.version}-win.zip signed_dir"
          sh "ls -a signed_dir"
        }
      }
    }

    stage('Download Mac artifact') {
      steps {
        script {
          sh "mkdir -p unpack_mac_dir"
          def macOsFile = "aspect-model-editor-v${env.version}-mac.zip"
          sh "curl -L -H 'Accept: application/vnd.github.v3+json' \
                        -H 'Authorization: Bearer ${GITHUB_BOT_TOKEN}' \
                        '${env.artifact_url_mac}' \
                        --output 'unpack_mac_dir/${macOsFile}'"
          sh "unzip -o unpack_mac_dir/${macOsFile} -d unpack_mac_dir"
          sh "unzip -o unpack_mac_dir/${macOsFile} -d unpack_mac_dir"
          sh "rm 'unpack_mac_dir/${macOsFile}'"
          sh "ls -a unpack_mac_dir"
        }
      }
    }

    stage('Sign Electron Application on Mac') {
      steps {
        script {
          nodejs(nodeJSInstallationName: 'node_20.x') {
            sh '''
              echo "NPM version:"
              npm --version
              npm install isbinaryfile
              cd core
              chmod +x electron-libs/scripts/sign.sh
              chmod +x electron-libs/scripts/notarize.sh
              node electron-libs/scripts/after-pack.js
            '''
          }
        }
      }
    }

    stage('Convert Mac Applications to DMG') {
      steps {
        script {
          def macOsFile = "aspect-model-editor-v${env.version}-mac.dmg"
          sh "mkdir -p unsigned_dir"
          sh "chmod -R 00755 ./unpack_mac_dir/Aspect-Model-Editor.app"
          sh "cd unpack_mac_dir && zip -r ../unsigned_dir/Aspect-Model-Editor.zip Aspect-Model-Editor.app"
          sh "mvn clean package"
          sh "mv unsigned_dir/Aspect-Model-Editor.dmg unsigned_dir/${macOsFile}"
        }
      }
    }

    stage('Sign Mac Applications') {
      steps {
        script {
          def macOsFile = "aspect-model-editor-v${env.version}-mac.dmg"
          sh "mkdir -p signed_dir"
          sh "curl -o signed_dir/${macOsFile} -F file=@unsigned_dir/${macOsFile} -F entitlements=@entitlements.plist https://cbi.eclipse.org/macos/codesign/sign"
          sh "ls -a signed_dir"
        }
      }
    }

    stage('MacOS Notarization') {
      steps {
        script {
          def macOsFile = "aspect-model-editor-v${env.version}-mac.dmg"

          def jsonOptions = "options={\"primaryBundleId\": \"org.eclipse.esmf\", \"staple\": true};type=application/json"
          def response = sh(script: "curl -X POST -F file=@signed_dir/${macOsFile} -F '${jsonOptions}' https://cbi.eclipse.org/macos/xcrun/notarize", returnStdout: true).trim()

          def jsonSlurper = new JsonSlurper()
          def json = jsonSlurper.parseText(response)
          String uuid = json.uuid

          while (json.notarizationStatus.status == 'IN_PROGRESS') {
            sleep(time: 1, unit: 'MINUTES')
            response = sh(script: "curl https://cbi.eclipse.org/macos/xcrun/${uuid}/status", returnStdout: true).trim()
            json = jsonSlurper.parseText(response)
          }

          if (json.notarizationStatus.status != 'COMPLETE') {
            echo "Notarization failed: ${response}"
            error("Notarization failed.")
          }

          sh "curl -JO -o ${macOsFile} https://cbi.eclipse.org/macos/xcrun/${uuid}/download"
          sh "ls -a"
        }
      }
    }

    stage('Release signed Windows and Mac artifact to GitHub Releases') {
      steps {
        script {
          def repo = "eclipse-esmf/esmf-aspect-model-editor"
          def tagName = "v${env.version}"
          def fileNameWin = "aspect-model-editor-v${env.version}-win.zip"
          def fileNameMac = "aspect-model-editor-v${env.version}-mac.dmg"
          def releaseId = ""

          def tagExists = sh(script: """
                        curl -s -L \\
                             -H "Accept: application/vnd.github+json" \\
                             -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                             https://api.github.com/repos/${repo}/git/refs/tags/${tagName} | jq -r '.ref'
                    """, returnStdout: true).trim()

          if (tagExists == "null") {
            // Tag does not exist, create a new one
            releaseId = sh(script: """
                            curl -s -L \\
                                 -H "Accept: application/vnd.github+json" \\
                                 -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                                 -X POST \\
                                 -d '{ "tag_name": "${tagName}", "name": "${tagName}", "body": "Release ${tagName}" }' \\
                                 https://api.github.com/repos/${repo}/releases | jq -r '.id'
                        """, returnStdout: true).trim()
          } else {
            // Tag exists, use the existing one
            releaseId = sh(script: """
                            curl -s -L \\
                                 -H "Accept: application/vnd.github+json" \\
                                 -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \\
                                 https://api.github.com/repos/${repo}/releases/tags/${tagName} | jq -r '.id'
                        """, returnStdout: true).trim()
          }

          sh """
                    curl -L \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \\
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         -H "Content-Type: application/octet-stream" \
                         --data-binary @${fileNameWin} \
                         "https://uploads.github.com/repos/${repo}/releases/${releaseId}/assets?name=${fileNameWin}"
                    """

          sh """
                    curl -L \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \\
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         -H "Content-Type: application/octet-stream" \
                         --data-binary @${fileNameMac} \
                         "https://uploads.github.com/repos/${repo}/releases/${releaseId}/assets?name=${fileNameMac}"
                    """

          sh """
                    curl -X DELETE \
                         -H "Authorization: Bearer \$GITHUB_BOT_TOKEN" \
                         "https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/git/refs/heads/pre_release_configuration"
                    """
        }
      }
    }
  }
}
